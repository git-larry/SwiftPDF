#!/usr/bin/env node

/**
 * Script de optimizaci√≥n para construcci√≥n de producci√≥n
 * Ejecuta varias tareas de optimizaci√≥n antes del build
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Iniciando optimizaci√≥n para producci√≥n...\n');

// 1. Limpiar directorios de construcci√≥n
console.log('üßπ Limpiando directorios...');
try {
  execSync('rm -rf .next', { stdio: 'inherit' });
  execSync('rm -rf out', { stdio: 'inherit' });
  console.log('‚úÖ Directorios limpiados\n');
} catch (error) {
  console.log('‚ö†Ô∏è No se pudieron limpiar algunos directorios (puede ser normal)\n');
}

// 2. Verificar dependencias
console.log('üì¶ Verificando dependencias...');
try {
  execSync('npm audit --audit-level moderate', { stdio: 'inherit' });
  console.log('‚úÖ Dependencias verificadas\n');
} catch (error) {
  console.log('‚ö†Ô∏è Se encontraron vulnerabilidades. Considera ejecutar npm audit fix\n');
}

// 3. Verificar lint
console.log('üîç Verificando c√≥digo con ESLint...');
try {
  execSync('npm run lint', { stdio: 'inherit' });
  console.log('‚úÖ C√≥digo verificado\n');
} catch (error) {
  console.log('‚ùå Se encontraron errores de lint. Corrige antes de continuar.\n');
  process.exit(1);
}

// 4. Verificar tipos TypeScript
console.log('üìù Verificando tipos TypeScript...');
try {
  execSync('npx tsc --noEmit', { stdio: 'inherit' });
  console.log('‚úÖ Tipos verificados\n');
} catch (error) {
  console.log('‚ùå Se encontraron errores de TypeScript. Corrige antes de continuar.\n');
  process.exit(1);
}

// 5. Optimizar im√°genes (si existen)
console.log('üñºÔ∏è Verificando optimizaci√≥n de im√°genes...');
const publicDir = path.join(process.cwd(), 'public');
if (fs.existsSync(publicDir)) {
  console.log('‚úÖ Directorio p√∫blico encontrado\n');
} else {
  console.log('‚ÑπÔ∏è No se encontr√≥ directorio p√∫blico\n');
}

// 6. Verificar variables de entorno
console.log('üîß Verificando configuraci√≥n...');
const envExample = path.join(process.cwd(), '.env.example');
const envLocal = path.join(process.cwd(), '.env.local');

if (fs.existsSync(envExample)) {
  console.log('‚úÖ Archivo .env.example encontrado');
} else {
  console.log('‚ö†Ô∏è No se encontr√≥ .env.example');
}

if (fs.existsSync(envLocal)) {
  console.log('‚úÖ Archivo .env.local encontrado');
} else {
  console.log('‚ÑπÔ∏è No se encontr√≥ .env.local (opcional)');
}

// 7. Generar reporte de bundle (opcional)
console.log('\nüìä Generando an√°lisis de bundle...');
try {
  execSync('npm run analyze 2>/dev/null || echo "Script analyze no disponible"', { stdio: 'inherit' });
} catch (error) {
  console.log('‚ÑπÔ∏è An√°lisis de bundle no disponible');
}

console.log('\n‚ú® Optimizaci√≥n completada. Listo para construir!\n');
console.log('Ejecuta: npm run build');
console.log('Para exportar est√°tico: npm run export\n');